{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/results.js","../src/js/algorithms/branchBound/branchesAndBounds.js"],"sourcesContent":["// Об`єкт функцій\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   * @throws {Error} - Якщо неправильні вхідні дані.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    if (\n      !Number.isInteger(numOfStudents) ||\n      numOfStudents <= 0 ||\n      tau < 0 ||\n      deltaTau < 0\n    ) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікується ціле додатнє число numOfStudents, tau >= 0 та deltaTau >= 0.'\n      );\n    }\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість зайнять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    let times = [];\n    for (let i = 0; i < numOfStudents; i += 1) {\n      times.push(Math.floor(Math.random() * (120 - 45 + 1)) + 45);\n    }\n    return times;\n  },\n};\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\n\n// export const testMethod = taskGenerator.testMethod;\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n\n// let numOfStudents = 5; // Кількість учнів\n// let tau = 5; // Значення математичного сподівання\n// let deltaTau = 2; // Значення напівінтервалу ∆τ\n// let matrix = generateMatrix(numOfStudents, tau, deltaTau);\n// console.table(matrix);\n\n/// Матриця з прикладу курсової\n// let precedenceMatrix = [\n//   [NaN, 15, NaN, 20, NaN, 5, NaN, 10],\n//   [5, NaN, 15, NaN, 5, NaN, 10, NaN],\n//   [NaN, 20, NaN, 15, NaN, 5, NaN, 5],\n//   [10, NaN, 20, NaN, 5, NaN, 10, NaN],\n//   [NaN, 15, NaN, 15, NaN, 5, NaN, 5],\n//   [10, NaN, 15, NaN, 10, NaN, 10, NaN],\n//   [NaN, 20, NaN, 20, NaN, 10, NaN, 5],\n//   [5, NaN, 15, NaN, 5, NaN, 5, NaN],\n// ];\n","// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","export function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// export function printSchedule(minCostArray) {\n//   let schedule = ''; // Початкове значення розкладу\n\n//   // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n//   for (let i = 0; i < minCostArray.length; i++) {\n//     if (i === minCostArray.length - 1) {\n//       if (i % 2 === 0) {\n//         schedule += `g${minCostArray[i].Node}`;\n//       } else if (i % 2 !== 0) {\n//         schedule += `b${minCostArray[i].Node}`;\n//       }\n//     } else {\n//       if (i % 2 === 0) {\n//         schedule += `g${minCostArray[i].Node} -> `; // Додаємо номер вузла до розкладу\n//       } else if (i % 2 !== 0) {\n//         schedule += `b${minCostArray[i].Node} -> `;\n//       }\n//     }\n//   }\n//   return schedule; // Повертаємо розклад\n// }\n\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","// Pohorila Dariia\nimport * as Generator from '../../generator/taskGenerator.js';\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\nimport * as results from './results.js';\n\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\nconst trainingDuration = Generator.generateLessonDuration(10);\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(10, 15, 5);\n\nlet matrix = [\n  [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n  [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n  [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n  [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n  [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n  [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n  [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n  [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n];\n\nconsole.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\nconsole.table(matrix);\n\nconsole.log('\\nВУЗЛИ');\nconst { minCostArray, lastCost } = branchAndBound(matrix);\nconsole.log(minCostArray);\n\nconsole.log('\\nРОЗКЛАД: ');\nconsole.log(results.printSchedule(minCostArray));\n\nconsole.log('\\nСума переналаштувань:', lastCost);\n\nconst totalDuration = results.sumOfDurations(trainingDuration);\nconsole.log(`Тривалість уроків: `, totalDuration); // Total duration: 550 minutes\n\nconst totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\nconsole.log('Загальний час роботи тренера', totalWorkTime, '\\n');\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nfunction branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","minVal","maxVal","matrix","i","j","times","generateLessonDuration","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","row","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","printSchedule","minCostArray","schedule","isLastNode","node","isEven","sumOfDurations","durations","acc","duration","calcTrainerWorkTime","totalDuration","lastCost","trainingDuration","Generator.generateLessonDuration","branchAndBound","results.printSchedule","results.sumOfDurations","totalWorkTime","results.calcTrainerWorkTime","matrixData","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","column","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","curr"],"mappings":"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"}