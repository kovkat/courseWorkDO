{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/ant/ant.js","../src/js/tests/antTest.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/branchesAndBounds.js","../src/js/algorithms/branchBound/calcShowResults.js","../src/js/algorithms/branchBound/bnbResults.js","../src/js/tests/branchBoundTest.js","../src/js/algorithms/greedy.js","../src/js/algorithms/pairwisePermut.js","../src/js/tests/parwiseTest.js","../src/js/tests/timeTest.js"],"sourcesContent":["// Об`єкт функцій для генерації вхідних даних\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents, tau, deltaTau, true);\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість занять для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @returns {number[]} - Массив з тривалостями занять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents);\n\n    // Генерація тривалостей занять у діапазоні від 45 до 120 хвилин\n    const times = Array.from(\n      { length: numOfStudents },\n      () => Math.floor(Math.random() * (120 - 45 + 1)) + 45\n    );\n\n    return times;\n  },\n\n  // Отримати дефолтні вхідні дані\n  getDefaultInputValues: function () {\n    // матриця переналаштувань\n    let matrix = [\n      [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n      [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n      [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n      [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n      [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n      [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n      [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n    ];\n\n    // тривалість занять\n    let trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n    return { matrix, trainingDuration };\n  },\n};\n\n/**\n * Перевірка вхідних даних.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} [tau] - Значення математичного сподівання.\n * @param {number} [deltaTau] - Значення напівінтервалу ∆τ.\n * @param {boolean} [checkTauDeltaTau=false] - Флаг для перевірки tau та deltaTau.\n * @throws {Error} - Якщо неправильні вхідні дані.\n */\nexport function validateInputs(\n  numOfStudents,\n  tau,\n  deltaTau,\n  checkTauDeltaTau = false\n) {\n  if (\n    !Number.isInteger(numOfStudents) ||\n    numOfStudents <= 0 ||\n    numOfStudents % 2 !== 0 // Кількість студентів повинна бути парною\n  ) {\n    throw new Error(\n      'Неправильні вхідні дані! Очікується ціле додатнє парне число для numOfStudents.'\n    );\n  }\n\n  if (checkTauDeltaTau) {\n    if (tau < 0 || deltaTau < 0) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікуються не від’ємні значення для tau і deltaTau.'\n      );\n    }\n  }\n}\n\n// Приклад використання\n// try {\n//   const matrix = taskGenerator.generateMatrix(4, 50, 10);\n//   console.log('Матриця передування:', matrix);\n\n//   const lessonDurations = taskGenerator.generateLessonDuration(4);\n//   console.log('Тривалості занять:', lessonDurations);\n// } catch (error) {\n//   console.error(error.message);\n// }\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\nexport const getDefaultInputValues = taskGenerator.getDefaultInputValues;\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n","// Kovalenko Kateryna\nimport * as Generator from '../../generator/taskGenerator.js';\n\nexport function ant(n, t_matrix, alpha = 1) {\n  // Вимірювання часу виконання алгоритму\n  const startTime = performance.now();\n\n  // Параметри алгоритму\n\n  let beta = 1;\n  let tay_0 = 0.7;\n  let p = 0.1;\n\n  ///\n  let tay_matrix = [];\n  let lMax = 10;\n  let result = [];\n  let result_func;\n\n  let t_use = t_matrix.slice().map(row => row.slice());\n  //Матриця тривалостей уроків\n  let less_matrix = Generator.generateLessonDuration(n);\n\n  // Зведення матриці переналаштувань\n\n  function minFromRows(matrix) {\n    return matrix.map(row => Math.min(...row));\n  }\n\n  let minsByRows = minFromRows(t_use);\n\n  function subEveryRow(matrix, minBorder) {\n    const mins = minFromRows(matrix);\n    minBorder += mins.reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[i])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixRows, minBorder: newMinBorderRows } = subEveryRow(\n    t_use,\n    0\n  );\n\n  function minFromColumns(matrix) {\n    const mins = [];\n    const columns = Object.keys(matrix[0]);\n\n    columns.forEach(column => {\n      const columnValues = matrix.map(row => row[column]);\n      mins[column] = Math.min(...columnValues);\n    });\n\n    return mins;\n  }\n\n  let minsByCols = minFromColumns(t_use);\n\n  function subEveryColumn(matrix, minBorder) {\n    const mins = minFromColumns(matrix);\n    minBorder += Object.values(mins).reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[j])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixCols, minBorder: newMinBorderCols } = subEveryColumn(\n    t_use,\n    0\n  );\n\n  let min_res = newMinBorderCols + newMinBorderRows;\n\n  // Заповнення матриці ферамонів\n  for (let i = 0; i < n; ++i) {\n    tay_matrix[i] = [];\n    for (let j = 0; j < n; ++j) {\n      if (t_matrix[i][j] != Infinity) {\n        tay_matrix[i][j] = tay_0;\n      } else {\n        tay_matrix[i][j] = Infinity;\n      }\n    }\n  }\n\n  // Основна частина програми\n  for (let k = 1; k <= lMax; k++) {\n    let student = Math.floor(Math.random() * n); // Довільним чином обираємо першого учня на кожній ітерації\n    // console.log(\"ІТЕРАЦІЯ\", k)\n    let iteration_matrix = t_matrix.slice().map(row => row.slice());\n    let result_it = []; // змінна з результатами кожної ітерації\n    let result_it_func = 0;\n    let visited_array = Array.from({ length: n }, () => Array(n).fill(0));\n    result_it.push(student);\n    while (result_it.length < n) {\n      for (let x = 0; x < n; x++) iteration_matrix[x][student] = Infinity;\n      // Обчислення знаменника з формули 1\n      let formula_denominator = 0;\n      let res_set = new Map();\n      for (let i = 0; i < n; i++) {\n        if (iteration_matrix[student][i] != Infinity) {\n          formula_denominator +=\n            parseFloat(tay_matrix[student][i] ** alpha) *\n            (1 / t_matrix[student][i]) ** beta;\n        }\n      }\n      for (let i = 0; i < n; i++) {\n        let it = 0;\n        if (iteration_matrix[student][i] != Infinity) {\n          it = parseFloat(\n            (tay_matrix[student][i] ** alpha *\n              (1 / t_matrix[student][i]) ** beta) /\n              formula_denominator\n          ).toFixed(4);\n          if (res_set.size === 0) res_set.set(i, parseFloat(it));\n          else {\n            let lastValue = Array.from(res_set.values()).pop();\n            it = parseFloat(parseFloat(it) + parseFloat(lastValue)).toFixed(4);\n            res_set.set(i, parseFloat(it));\n          }\n        }\n      }\n\n      let randomNumber = parseFloat(Math.random()).toFixed(4); // Генерує випадкове число від 0 до 1\n\n      for (let [key, value] of res_set.entries()) {\n        if (parseFloat(randomNumber) <= parseFloat(value)) {\n          student = key;\n          result_it.push(student);\n          break;\n        }\n      }\n    }\n    // Обчислення ЦФ :\n    for (let i = 0; i < result_it.length - 1; i++) {\n      const currentStudent = result_it[i];\n      const nextStudent = result_it[i + 1];\n      result_it_func +=\n        parseFloat(t_matrix[currentStudent][nextStudent]) + less_matrix[i];\n      visited_array[currentStudent][nextStudent] = 1;\n    }\n\n    let delta_tay = min_res / result_it_func;\n    // Оновлення матриці феромонів\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (t_matrix[i][j] != Infinity) {\n          if (visited_array[i][j] === 1)\n            tay_matrix[i][j] = parseFloat(\n              (1 - p) * tay_matrix[i][j] + delta_tay\n            ).toFixed(4);\n          else\n            tay_matrix[i][j] = parseFloat((1 - p) * tay_matrix[i][j]).toFixed(\n              4\n            );\n        }\n      }\n    }\n\n    if (k === 1) {\n      result = result_it;\n      result_func = result_it_func;\n    } else if (result_func > result_it_func) {\n      result = result_it;\n      result_func = result_it_func;\n    }\n  }\n  //////\n  const endTime = performance.now();\n  const executionTime = endTime - startTime;\n  console.log('Розклад: ', result);\n  console.log('Значення ЦФ: ', result_func);\n  console.log('ExecutionTime: ', executionTime);\n\n  return { result, result_func, executionTime };\n}\n","import * as results from '../algorithms/ant/ant.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst n = 8;\nconst tau = 100;\nconst deltaTau = 10;\nconst alphaArray = [1, 2, 3, 4, 5];\n\nfunction test_ant(n, tau, deltaTau, alphaArray) {\n  let result = [];\n  let t_matrix = Generator.generateMatrix(n, tau, deltaTau);\n  console.table(t_matrix);\n\n  for (let i = 0; i < alphaArray.length; i += 1) {\n    let res = results.ant(n, t_matrix, alphaArray[i]);\n    result.push(res.result_func);\n    console.log(result);\n  }\n\n  return result;\n}\nlet result = test_ant(n, tau, deltaTau, alphaArray);\n\n// Вивести результати у вигляді графіка\nfunction drawChart(alpha, result, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // стовпчаста діаграма\n    data: {\n      labels: alphaArray,\n      datasets: [\n        {\n          label: 'ЦФ vs a',\n          data: result,\n          backgroundColor: 'rgb(255, 182, 193, 0.5)',\n          borderColor: 'rgba(255, 105, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від a',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу a',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n\ndrawChart(alphaArray, result, 'antTest');\n","// Pohorila Dariia\n\n// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","// Pohorila Dariia\n\n// Заборона негамільтонових шляхів\nexport function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// Pohorila Dariia\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\n// import * as setRowColumnInfinityJs from './setRowColumnInfinity.js';\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nexport function branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n\n////// OUTPUT\n////// DATA\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(numOfStudents, tau, deltaTau);\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n\n// console.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n// console.table(matrix);\n\n// console.log('\\nВУЗЛИ');\n// const { minCostArray, lastCost } = branchAndBound(matrix);\n// console.log(minCostArray);\n\n// console.log('\\nРОЗКЛАД:');\n// let schedule = results.printSchedule(minCostArray);\n// console.log(schedule);\n\n// console.log('\\nСума переналаштувань:', lastCost, 'хв');\n\n// const totalDuration = results.sumOfDurations(trainingDuration);\n// console.log(`Тривалість уроків:`, totalDuration, 'хв');\n\n// const totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\n// console.log('ЧАС РОБОТИ ТРЕНЕРА:', totalWorkTime, 'хв\\n');\n","// Pohorila Dariia\n\n// Вивести розклад\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\n// Обчислити суму тривалостей занять\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\n// Обчислити сумарний робочий час тренера\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","import * as Generator from '../../generator/taskGenerator.js';\nimport * as bnb from './branchesAndBounds.js';\nimport * as calcShowResults from './calcShowResults.js';\n\n//////// РОЗВ`ЯЗОК ЗАДАЧІ МГтМ ТА ВИВЕДЕННЯ РЕЗУЛЬТАТІВ РОБОТИ АЛГОРИТМУ\nexport function calcResultsBnB(matrix, trainingDuration) {\n  // Початок вимірювання часу\n  const startTime = performance.now();\n\n  // Виконання алгоритму гілок та границь\n  let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n  // Обчислення розкладу та часу роботи тренера\n  let schedule = calcShowResults.printSchedule(minCostArray);\n  let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n  let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n    totalDuration,\n    lastCost\n  );\n\n  // Завершення вимірювання часу та виведення результату\n  const endTime = performance.now();\n  const executionTimeBnB = endTime - startTime;\n\n  return {\n    totalWorkTimeBnB: totalWorkTime,\n    scheduleBnB: schedule,\n    executionTimeBnB,\n  };\n}\n\n/**\n * Обчислює результати для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n * @returns {Object} - Об'єкт з результатами.\n */\nexport function getResults(matrix, trainingDuration) {\n  // Виконання алгоритму гілок та границь\n  let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n  // Обчислення розкладу та часу роботи тренера\n  let schedule = calcShowResults.printSchedule(minCostArray);\n  let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n  let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n    totalDuration,\n    lastCost\n  );\n\n  // Повернення об'єкта з усіма результатами\n  return {\n    trainingDuration,\n    matrix,\n    minCostArray,\n    lastCost,\n    schedule,\n    totalDuration,\n    totalWorkTime,\n  };\n}\n\n/**\n * Виводить результати на консоль для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n */\nexport function outputResultsBnB(matrix, trainingDuration) {\n  // Отримання результатів\n  const results = getResults(matrix, trainingDuration);\n\n  // Виведення результатів на консоль\n  console.log('ГЕНЕРАЦІЯ ІНДИВІДУАЛЬНОЇ ЗАДАЧІ...\\n');\n  console.log('1.ТРИВАЛІСТЬ ЗАЙНЯТЬ');\n  console.table(results.trainingDuration);\n\n  console.log('2.МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n  console.table(results.matrix);\n\n  console.log('\\nПОШУК РОЗВ`ЯЗКУ МГтМ...');\n  console.log('\\nВузли');\n  console.log(results.minCostArray);\n\n  console.log('\\nРозклад:');\n  console.log(results.schedule);\n\n  console.log('\\nСума переналаштувань:', results.lastCost, 'хв');\n  console.log('Тривалість уроків:', results.totalDuration, 'хв');\n  console.log('Час роботи тренера:', results.totalWorkTime, 'хв\\n');\n\n  return results.totalWorkTime;\n}\n\n// Test Case\n// try {\n//   const numOfStudents = 8;\n//   const tau = 50;\n//   const deltaTau = 10;\n\n//   // outputResultsBnB(numOfStudents, tau, deltaTau);\n//   // let results = getResults(numOfStudents, tau, deltaTau);\n//   // console.log(results);\n// } catch (error) {\n//   console.error('Помилка:', error.message);\n// }\n","import * as results from '../algorithms/branchBound/bnbResults.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst numOfStudents = 8;\nconst tau = 100;\nconst deltaTauMassive = [10, 50];\n\n// Обчислення ЦФ для різних ∆τ\nfunction testBnb(numOfStudents, tau, deltaTauMassive) {\n  let targetFunctions = [];\n  const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n\n  for (let i = 0; i < deltaTauMassive.length; i += 1) {\n    const matrix = Generator.generateMatrix(\n      numOfStudents,\n      tau,\n      deltaTauMassive[i]\n    );\n\n    let res = results.calcResultsBnB(matrix, trainingDuration);\n    targetFunctions.push(res.totalWorkTimeBnB);\n  }\n\n  return targetFunctions;\n}\n\nlet targetFunctions = testBnb(numOfStudents, tau, deltaTauMassive);\nconsole.log(targetFunctions);\n\n// Вивести результати у вигляді графіка\nfunction drawChart(deltaTauMassive, targetFunctions, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // стовпчаста діаграма\n    data: {\n      labels: deltaTauMassive,\n      datasets: [\n        {\n          label: 'ЦФ vs ∆τ',\n          data: targetFunctions,\n          backgroundColor: 'rgb(96, 130, 182)', // Блакитний колір для стовпців\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від ∆τ',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу ∆τ',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n\ndrawChart(deltaTauMassive, targetFunctions, 'bnbTest');\n","import * as Generator from '../generator/taskGenerator.js';\n\nexport function generateMatrix(numOfStudents, tau, deltaTau) {\n  let matrix = [];\n\n  for (let i = 0; i < numOfStudents; i += 1) {\n    matrix[i] = [];\n\n    for (let j = 0; j < numOfStudents; j += 1) {\n      if (i % 2 === j % 2) {\n        matrix[i][j] = Infinity;\n        continue;\n      }\n\n      let minVal = tau - deltaTau;\n      let maxVal = tau + deltaTau;\n\n      matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n    }\n  }\n\n  return matrix;\n}\n\nfunction findNearestNeighbor(matrix, current, visited) {\n  let nearest = -1;\n  let minDistance = Infinity;\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (!visited.has(i) && matrix[current][i] < minDistance) {\n      minDistance = matrix[current][i];\n      nearest = i;\n    }\n  }\n\n  return nearest;\n}\n\nexport function greedySchedule(matrix) {\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  return schedule;\n}\n\n// Additional function for the timeTest\nexport function getGreedyResults(matrix) {\n  const startTime = performance.now();\n\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  const endTime = performance.now();\n  const executionTimeGreedy = endTime - startTime;\n\n  return {\n    schedule,\n    executionTimeGreedy,\n  };\n}\n\nexport function calculateTotalPreparationTime(matrix, schedule) {\n  let total = 0;\n  for (let i = 0; i < schedule.length - 1; i++) {\n    total += matrix[schedule[i]][schedule[i + 1]];\n  }\n  return total;\n}\n","import { generateMatrix, greedySchedule, calculateTotalPreparationTime } from './greedy.js';\n\nfunction swapPairs(schedule, numOfStudents) {\n  let newSchedule = schedule.slice();\n  let group = Math.random() < 0.5 ? 0 : 1;\n\n  let candidates = [];\n  for (let i = 0; i < numOfStudents; i++) {\n    if (i % 2 === group) {\n      candidates.push(i);\n    }\n  }\n\n  let index1 = candidates[Math.floor(Math.random() * candidates.length)];\n  let index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  while (index1 === index2) {\n    index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  }\n\n  let temp = newSchedule[index1];\n  newSchedule[index1] = newSchedule[index2];\n  newSchedule[index2] = temp;\n\n  return newSchedule;\n}\n\nfunction optimizeSchedule(matrix, initialSchedule, maxIterations) {\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  return { bestSchedule, bestTime };\n}\n\n// Additional func for the timeTest\nexport function getResultsPP(\n  matrix,\n  initialSchedule = greedySchedule(matrix),\n  maxIterations = 1000\n) {\n  const startTime = performance.now();\n\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  const endTime = performance.now();\n  const executionTimePairwise = endTime - startTime;\n\n  return { bestSchedule, bestTime, executionTimePairwise };\n}\n","import { generateMatrix, getGreedyResults, calculateTotalPreparationTime } from '../algorithms/greedy.js';\nimport { getResultsPP } from '../algorithms/pairwisePermut.js';\nimport { ant } from '../algorithms/ant/ant.js';\n\n// Параметри\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // Розмірність задачі\nconst tau = 100; // Значення математичного сподівання\nconst deltaTau = 10; // Значення напівінтервалу\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Запуск тесту та побудова діаграм\n    const data = deviationTest(numOfStudents, tau, deltaTau);\n    drawDeviationChart(data, 'deviationTest'); // Відображення діаграм\n\n    // Середні відхилення для виведення в консоль\n    let { averageDeviationsFromAnt, averageDeviationsFromGreedy } = deviationTest(numOfStudents, tau, deltaTau);\n\n    console.log('Середні відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою мурашиного алгоритму – ', averageDeviationsFromAnt);\n    console.log('Середні відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою жадібного алгоритму – ', averageDeviationsFromGreedy);\n});\n\n// Тестова функція для розрахунку відхилень\nfunction deviationTest(numOfStudents, tau, deltaTau) {\n    let averageDeviationsFromAnt = [];\n    let averageDeviationsFromGreedy = [];\n\n    for (let n of numOfStudents) {\n        let deviationsFromAnt = [];\n        let deviationsFromGreedy = [];\n\n        for (let i = 0; i < 20; i++) {\n            // Згенерувати індивідуальну задачу P\n            let P = generateMatrix(n, tau, deltaTau);\n\n            // Розв’язати задачу P методом попарних перестановок, де початкова задача P визначена мурашиним алгоритмом\n            let { result: antSchedule, result_func: antTF } = ant(n, P, 1);\n\n            // Розв’язати задачу P методом попарних перестановок, де початкова задача P визначена жадібним алгоритмом\n            let { schedule: greedySchedule } = getGreedyResults(P);\n            let greedyTF = calculateTotalPreparationTime(P, greedySchedule);\n\n            // Вивід результатів жадібного алгоритму\n            console.log(`Розмірність задачі: ${n}, Запуск: ${i + 1}`);\n            console.log(`  Початковий розв’язок з жадібного алгоритму - Цільова функція (ЦФ): ${greedyTF}`);\n            console.log(`  Початковий розв’язок з мурашиного алгоритму - Цільова функція (ЦФ): ${antTF}`);\n\n            // Розв’язати задачу P методом попарних перестановок\n            let { bestTime: ppTimeFromAnt } = getResultsPP(P, antSchedule);\n            let { bestTime: ppTimeFromGreedy } = getResultsPP(P, greedySchedule);\n\n            // Вивід результатів методу попарних перестановок\n            console.log(`  Попарні перестановки з початковим розв’язком з мурашиного алгоритму - ЦФ: ${ppTimeFromAnt}`);\n            console.log(`  Попарні перестановки з початковим розв’язком з жадібного алгоритму - ЦФ: ${ppTimeFromGreedy}`);\n\n            // Розрахувати відхилення ЦФ\n            let deviationFromAnt = calculateDeviation(ppTimeFromAnt, antTF);\n            let deviationFromGreedy = calculateDeviation(ppTimeFromGreedy, greedyTF);\n\n            console.log(`  Відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою мурашиного алгоритму: ${deviationFromAnt}`);\n            console.log(`  Відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою жадібного алгоритму: ${deviationFromGreedy}`);\n\n            deviationsFromAnt.push(deviationFromAnt);\n            deviationsFromGreedy.push(deviationFromGreedy);\n        }\n\n        // Визначити середнє відхилення ЦФ\n        averageDeviationsFromAnt.push(calculateAverage(deviationsFromAnt));\n        averageDeviationsFromGreedy.push(calculateAverage(deviationsFromGreedy));\n    }\n\n    return {\n        labels: numOfStudents, // Мітки для діаграми\n        averageDeviationsFromAnt,\n        averageDeviationsFromGreedy,\n    };\n}\n\n// Функція для розрахунку відхилення ЦФ\nfunction calculateDeviation(value1, value2) {\n    return Math.abs(value1 - value2) / Math.min(value1, value2);\n}\n\n// Побудова діаграм\nfunction drawDeviationChart(data, htmlElement) {\n    const ctx = document.getElementById(htmlElement).getContext('2d');\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: data.labels,\n            datasets: [\n                {\n                    label: 'Відхилення від ЦФ мурашиного алгоритму',\n                    data: data.averageDeviationsFromAnt,\n                    backgroundColor: 'rgb(96, 130, 182)',\n                    borderColor: 'rgba(70, 130, 180, 1)',\n                    borderWidth: 1,\n                },\n                {\n                    label: 'Відхилення від ЦФ жадібного алгоритму',\n                    data: data.averageDeviationsFromGreedy,\n                    backgroundColor: 'rgb(182, 96, 130)',\n                    borderColor: 'rgba(180, 70, 130, 1)',\n                    borderWidth: 1,\n                },\n            ],\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                title: {\n                    display: true,\n                    text: 'Середнє відхилення ЦФ для методу попарних перестановок відносно ЦФ мурашиного та жадібного алгоритмів',\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function (context) {\n                            return `Середнє відхилення: ${context.raw}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    beginAtZero: false,\n                    title: {\n                        display: true,\n                        text: 'Кількість студентів (n)',\n                    },\n                },\n                y: {\n                    beginAtZero: false,\n                    title: {\n                        display: true,\n                        text: 'Середнє відхилення',\n                    },\n                },\n            },\n            layout: {\n                backgroundColor: 'rgba(211, 211, 211, 1)',\n            },\n        },\n    });\n}\n\n// Розрахунок середнього значення масиву\nfunction calculateAverage(arr) {\n    if (arr.length === 0) {\n        return 0; // Повернути 0, якщо масив пустий\n    }\n\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n\n    return sum / arr.length;\n}\n","import * as Generator from '../generator/taskGenerator.js';\nimport * as resultsGreedy from '../algorithms/greedy.js';\nimport * as resultsAnt from '../algorithms/ant/ant.js';\nimport * as resultsBnB from '../algorithms/branchBound/bnbResults.js';\nimport * as resultsPP from '../algorithms/pairwisePermut.js';\n\n// Вхідні дані\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // розмірність задачі\nconst tau = 100; // значення математичного сподівання\nconst deltaTau = 10; // значення напівінтервалу\n\n// Приклад виклику функції\nconst data = timeTest(numOfStudents, tau, deltaTau);\ndrawTimeChart(data, 'timeTest'); // вивід гістограм\n\n// середні часи для відображення в консолі\n// let { averageTimesGreedy, averageTimesAnt, averageTimesBnB, averageTimesPP } =\n//   timeTest(numOfStudents, tau, deltaTau);\n\n// console.log('averageTimesGreedy – ', averageTimesGreedy);\n// console.log('averageTimesAnt – ', averageTimesAnt);\n// console.log('averageTimesBnB – ', averageTimesBnB);\n// console.log('averageTimesPP – ', averageTimesPP);\n\n// Тестування\nfunction timeTest(numOfStudents, tau, deltaTau) {\n  // Часи виконання алгоритмів та середні часи виконання алгоритмів\n  let averageTimesGreedy = [];\n  let averageTimesAnt = [];\n  let averageTimesBnB = [];\n  let averageTimesPP = [];\n\n  for (let i = 0; i < numOfStudents.length; i += 1) {\n    // 20 прогонів\n    let execTimesGreedy = [];\n    let execTimesAnt = [];\n    let execTimesBnB = [];\n    let execTimesPP = [];\n\n    for (let j = 0; j < 20; j += 1) {\n      // Генеруємо тривалості уроків та матрицю переналаштувань\n      const trainingDuration = Generator.generateLessonDuration(\n        numOfStudents[i],\n        tau,\n        deltaTau\n      );\n      const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n      // Обчислюємо роботи алгоритмів\n      const step = 0.1;\n\n      // жадібний\n      const resGreedy =\n        resultsGreedy.getGreedyResults(matrix).executionTimeGreedy + step;\n      // мурахи\n      const resAnt =\n        resultsAnt.ant(numOfStudents[i], matrix).executionTime + step;\n      // МГтМ\n      const resBnB =\n        resultsBnB.calcResultsBnB(matrix, trainingDuration).executionTimeBnB +\n        step;\n\n      // перестановки\n      const resPP = resultsPP.getResultsPP(matrix).executionTimePairwise + step;\n\n      // Додаємо часи в масив відповідного алгоритму\n\n      execTimesGreedy.push(resGreedy);\n      execTimesBnB.push(resBnB);\n      execTimesPP.push(resPP);\n      execTimesAnt.push(resAnt);\n    }\n\n    // Обчислюємо середні часи та додаємо до масиву відповідного алгоритму\n    averageTimesGreedy.push(calculateAverage(execTimesGreedy));\n    averageTimesBnB.push(calculateAverage(execTimesBnB));\n    averageTimesPP.push(calculateAverage(execTimesPP));\n    averageTimesAnt.push(calculateAverage(execTimesAnt));\n  }\n\n  return {\n    labels: numOfStudents, // мітки графіка по горизонталі\n    averageTimesGreedy,\n    averageTimesAnt,\n    averageTimesBnB,\n    averageTimesPP,\n  };\n}\n\n// Виводимо гістограми\nfunction drawTimeChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Greedy',\n          data: data.averageTimesGreedy,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Ant',\n          data: data.averageTimesAnt,\n          backgroundColor: 'rgb(182, 96, 130)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'BnB',\n          data: data.averageTimesBnB,\n          backgroundColor: 'rgb(96, 182, 130)',\n          borderColor: 'rgba(70, 180, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Pairwise',\n          data: data.averageTimesPP,\n          backgroundColor: 'rgb(130, 96, 182)',\n          borderColor: 'rgba(130, 70, 180, 1)',\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average Execution Time vs Number of Students',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average Execution Time: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of Students (n)',\n          },\n        },\n        y: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Average Execution Time (ms)',\n          },\n        },\n      },\n      layout: {\n        backgroundColor: 'rgba(211, 211, 211, 1)',\n      },\n    },\n  });\n}\n\n// Обчислити середнє значення масиву\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Повертаємо 0, якщо масив пустий\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n\n///////// OTHER\n// function drawTimeChart(averageTimesGreedy, labels, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: labels,\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: averageTimesGreedy,\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//         },\n//       },\n//     },\n//   });\n// }\n\n// function drawTimeChart(data, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: data.averageTimesGreedy, // Горизонтальна вісь: час виконання\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: data.labels, // Вертикальна вісь: кількість студентів\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Ant',\n//           data: data.averageTimesAnt,\n//           backgroundColor: 'rgb(182, 96, 130)',\n//           borderColor: 'rgba(180, 70, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'BnB',\n//           data: data.averageTimesBnB,\n//           backgroundColor: 'rgb(96, 182, 130)',\n//           borderColor: 'rgba(70, 180, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Pairwise',\n//           data: data.averageTimesPairwise,\n//           backgroundColor: 'rgb(130, 96, 182)',\n//           borderColor: 'rgba(130, 70, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       responsive: true,\n//       plugins: {\n//         legend: {\n//           position: 'top',\n//         },\n//         title: {\n//           display: true,\n//           text: 'Average Execution Time vs Number of Students',\n//         },\n//         tooltip: {\n//           callbacks: {\n//             label: function (context) {\n//               return `Average Execution Time: ${context.raw}`;\n//             },\n//           },\n//         },\n//       },\n//       scales: {\n//         x: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Average Execution Time',\n//           },\n//         },\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Number of Students (n)',\n//           },\n//         },\n//       },\n//       layout: {\n//         backgroundColor: 'rgba(211, 211, 211, 1)',\n//       },\n//     },\n//   });\n// }\n\n/**\n * Результати:\n * для різних ен виводимо середній час роботи одного і того ж алгоритма\n */\n\n// function timeTest(numOfStudents, tau, deltaTau) {\n//   // Часи виконання алгоритмів\n//   let execTimeGreedy = [];\n//   let execTimeAnt = [];\n//   let execTimeBnB = [];\n//   let execTimePairwise = [];\n\n//   // Середні часи виконання алгоритмів\n//   let aveTimeGreedy = [];\n//   let aveTimeAnt = [];\n//   let aveTimeBnB = [];\n//   let aveTimePairwise = [];\n\n//   let execTimes = [];\n//   let aveTimes = [];\n\n//   for (let i = 0; i < numOfStudents.length; i += 1) {\n//     execTimeGreedy = [];\n//     execTimeAnt = [];\n//     execTimeBnB = [];\n//     execTimePairwise = [];\n\n//     // 20 прогонів\n//     for (let j = 0; j < 20; j += 1) {\n//       // Генеруємо тривалості уроків\n//       const trainingDuration = Generator.generateLessonDuration(\n//         numOfStudents[i],\n//         tau,\n//         deltaTau\n//       );\n\n//       // Генеруємо матрицю переналаштувань\n//       const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n//       // Обчислюємо роботи алгоритмів\n//       let resBnB = resultsBnB.calcResultsBnB(matrix, trainingDuration);\n\n//       // Додаємо часи в масив відповідного алгоритму\n//       execTimeBnB.push(resBnB.executionTimeBnB);\n//     }\n\n//     const averageTimeBnB = average(execTimeBnB);\n//     // Округлення до двох знаків після коми\n//     aveTimeBnB.push(parseFloat(averageTimeBnB.toFixed(2)));\n//   }\n\n//   aveTimes.push(aveTimeGreedy, aveTimeAnt, aveTimeBnB, aveTimePairwise);\n//   execTimes.push(execTimeGreedy, execTimeAnt, execTimeBnB, execTimePairwise);\n\n//   return { execTimes, aveTimes };\n// }\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","validateInputs","minVal","maxVal","matrix","i","j","checkTauDeltaTau","generateMatrix","generateLessonDuration","ant","n","t_matrix","alpha","startTime","beta","tay_0","p","tay_matrix","lMax","result","result_func","t_use","row","less_matrix","Generator.generateLessonDuration","minFromRows","subEveryRow","minBorder","mins","acc","curr","value","newMatrixRows","newMinBorderRows","minFromColumns","column","columnValues","subEveryColumn","newMatrixCols","newMinBorderCols","min_res","k","student","iteration_matrix","result_it","result_it_func","visited_array","x","formula_denominator","res_set","it","lastValue","randomNumber","key","currentStudent","nextStudent","delta_tay","executionTime","alphaArray","test_ant","Generator.generateMatrix","res","results.ant","drawChart","htmlElement","ctx","context","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","branchAndBound","matrixData","minCostArray","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","lastCost","printSchedule","schedule","isLastNode","node","isEven","sumOfDurations","durations","duration","calcTrainerWorkTime","totalDuration","calcResultsBnB","trainingDuration","bnb.branchAndBound","calcShowResults.printSchedule","calcShowResults.sumOfDurations","totalWorkTime","calcShowResults.calcTrainerWorkTime","executionTimeBnB","deltaTauMassive","testBnb","targetFunctions","results.calcResultsBnB","findNearestNeighbor","current","visited","nearest","minDistance","greedySchedule","next","getGreedyResults","executionTimeGreedy","calculateTotalPreparationTime","swapPairs","newSchedule","group","candidates","index1","index2","temp","getResultsPP","initialSchedule","maxIterations","bestSchedule","bestTime","newTime","executionTimePairwise","data","deviationTest","drawDeviationChart","averageDeviationsFromAnt","averageDeviationsFromGreedy","deviationsFromAnt","deviationsFromGreedy","P","antSchedule","antTF","greedyTF","ppTimeFromAnt","ppTimeFromGreedy","deviationFromAnt","calculateDeviation","deviationFromGreedy","calculateAverage","value1","value2","arr","sum","timeTest","drawTimeChart","averageTimesGreedy","averageTimesAnt","averageTimesBnB","averageTimesPP","execTimesGreedy","execTimesAnt","execTimesBnB","execTimesPP","step","resGreedy","resultsGreedy.getGreedyResults","resAnt","resultsAnt.ant","resBnB","resultsBnB.calcResultsBnB","resPP","resultsPP.getResultsPP"],"mappings":"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"}