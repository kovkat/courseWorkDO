{"version":3,"file":"commonHelpers.js","sources":["../src/js/algorithms/greedy.js","../src/js/algorithms/pairwisePermut.js","../src/js/algorithms/ant/ant.js","../src/js/tests/parwiseTest.js"],"sourcesContent":["import * as Generator from '../generator/taskGenerator.js';\n\nexport function generateMatrix(numOfStudents, tau, deltaTau) {\n  let matrix = [];\n\n  for (let i = 0; i < numOfStudents; i += 1) {\n    matrix[i] = [];\n\n    for (let j = 0; j < numOfStudents; j += 1) {\n      if (i % 2 === j % 2) {\n        matrix[i][j] = Infinity;\n        continue;\n      }\n\n      let minVal = tau - deltaTau;\n      let maxVal = tau + deltaTau;\n\n      matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n    }\n  }\n\n  return matrix;\n}\n\nfunction findNearestNeighbor(matrix, current, visited) {\n  let nearest = -1;\n  let minDistance = Infinity;\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (!visited.has(i) && matrix[current][i] < minDistance) {\n      minDistance = matrix[current][i];\n      nearest = i;\n    }\n  }\n\n  return nearest;\n}\n\nexport function greedySchedule(matrix) {\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  return schedule;\n}\n\n// Additional function for the timeTest\nexport function getGreedyResults(matrix) {\n  const startTime = performance.now();\n\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  const endTime = performance.now();\n  const executionTimeGreedy = endTime - startTime;\n\n  return {\n    schedule,\n    executionTimeGreedy,\n  };\n}\n\nexport function calculateTotalPreparationTime(matrix, schedule) {\n  let total = 0;\n  for (let i = 0; i < schedule.length - 1; i++) {\n    total += matrix[schedule[i]][schedule[i + 1]];\n  }\n  return total;\n}\n","import { generateMatrix, greedySchedule, calculateTotalPreparationTime } from './greedy.js';\n\nfunction swapPairs(schedule, numOfStudents) {\n  let newSchedule = schedule.slice();\n  let group = Math.random() < 0.5 ? 0 : 1;\n\n  let candidates = [];\n  for (let i = 0; i < numOfStudents; i++) {\n    if (i % 2 === group) {\n      candidates.push(i);\n    }\n  }\n\n  let index1 = candidates[Math.floor(Math.random() * candidates.length)];\n  let index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  while (index1 === index2) {\n    index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  }\n\n  let temp = newSchedule[index1];\n  newSchedule[index1] = newSchedule[index2];\n  newSchedule[index2] = temp;\n\n  return newSchedule;\n}\n\nfunction optimizeSchedule(matrix, initialSchedule, maxIterations) {\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  return { bestSchedule, bestTime };\n}\n\n// Additional func for the timeTest\nexport function getResultsPP(\n  matrix,\n  initialSchedule = greedySchedule(matrix),\n  maxIterations = 1000\n) {\n  const startTime = performance.now();\n\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  const endTime = performance.now();\n  const executionTimePairwise = endTime - startTime;\n\n  return { bestSchedule, bestTime, executionTimePairwise };\n}\n","// Kovalenko Kateryna\nimport { generateMatrix } from '../../generator/taskGenerator.js';\n\nexport function ant(n, t_matrix, alpha = 1) {\n  // Вимірювання часу виконання алгоритму\n  const startTime = performance.now();\n\n  // Параметри алгоритму\n\n  let beta = 1;\n  let tay_0 = 0.7;\n  let p = 0.1;\n\n  ///\n  let tay_matrix = [];\n  let lMax = 10;\n  let result = [];\n  let result_func;\n\n  let t_use = t_matrix.slice().map(row => row.slice());\n\n  // Зведення матриці переналаштувань\n\n  function minFromRows(matrix) {\n    return matrix.map(row => Math.min(...row));\n  }\n\n  let minsByRows = minFromRows(t_use);\n\n  function subEveryRow(matrix, minBorder) {\n    const mins = minFromRows(matrix);\n    minBorder += mins.reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[i])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixRows, minBorder: newMinBorderRows } = subEveryRow(\n    t_use,\n    0\n  );\n\n  function minFromColumns(matrix) {\n    const mins = [];\n    const columns = Object.keys(matrix[0]);\n\n    columns.forEach(column => {\n      const columnValues = matrix.map(row => row[column]);\n      mins[column] = Math.min(...columnValues);\n    });\n\n    return mins;\n  }\n\n  let minsByCols = minFromColumns(t_use);\n\n  function subEveryColumn(matrix, minBorder) {\n    const mins = minFromColumns(matrix);\n    minBorder += Object.values(mins).reduce((acc, curr) => acc + curr, 0);\n\n    const newMatrix = matrix.map((row, i) =>\n      row.map((value, j) => value - mins[j])\n    );\n\n    return { matrix: newMatrix, minBorder };\n  }\n\n  let { matrix: newMatrixCols, minBorder: newMinBorderCols } = subEveryColumn(\n    t_use,\n    0\n  );\n\n  let min_res = newMinBorderCols + newMinBorderRows;\n\n  // Заповнення матриці ферамонів\n  for (let i = 0; i < n; ++i) {\n    tay_matrix[i] = [];\n    for (let j = 0; j < n; ++j) {\n      if (t_matrix[i][j] != Infinity) {\n        tay_matrix[i][j] = tay_0;\n      } else {\n        tay_matrix[i][j] = Infinity;\n      }\n    }\n  }\n\n  // Основна частина програми\n  for (let k = 1; k <= lMax; k++) {\n    let student = Math.floor(Math.random() * n); // Довільним чином обираємо першого учня на кожній ітерації\n    // console.log(\"ІТЕРАЦІЯ\", k)\n    let iteration_matrix = t_matrix.slice().map(row => row.slice());\n    let result_it = []; // змінна з результатами кожної ітерації\n    let result_it_func = 0;\n    let visited_array = Array.from({ length: n }, () => Array(n).fill(0));\n    result_it.push(student);\n    while (result_it.length < n) {\n      for (let x = 0; x < n; x++) iteration_matrix[x][student] = Infinity;\n      // Обчислення знаменника з формули 1\n      let formula_denominator = 0;\n      let res_set = new Map();\n      for (let i = 0; i < n; i++) {\n        if (iteration_matrix[student][i] != Infinity) {\n          formula_denominator +=\n            parseFloat(tay_matrix[student][i] ** alpha) *\n            (1 / t_matrix[student][i]) ** beta;\n        }\n      }\n      for (let i = 0; i < n; i++) {\n        let it = 0;\n        if (iteration_matrix[student][i] != Infinity) {\n          it = parseFloat(\n            (tay_matrix[student][i] ** alpha *\n              (1 / t_matrix[student][i]) ** beta) /\n              formula_denominator\n          ).toFixed(4);\n          if (res_set.size === 0) res_set.set(i, parseFloat(it));\n          else {\n            let lastValue = Array.from(res_set.values()).pop();\n            it = parseFloat(parseFloat(it) + parseFloat(lastValue)).toFixed(4);\n            res_set.set(i, parseFloat(it));\n          }\n        }\n      }\n\n      let randomNumber = parseFloat(Math.random()).toFixed(4); // Генерує випадкове число від 0 до 1\n\n      for (let [key, value] of res_set.entries()) {\n        if (parseFloat(randomNumber) <= parseFloat(value)) {\n          student = key;\n          result_it.push(student);\n          break;\n        }\n      }\n    }\n    // Обчислення ЦФ :\n    for (let i = 0; i < result_it.length - 1; i++) {\n      const currentStudent = result_it[i];\n      const nextStudent = result_it[i + 1];\n      result_it_func += parseFloat(t_matrix[currentStudent][nextStudent]);\n      visited_array[currentStudent][nextStudent] = 1;\n    }\n\n    let delta_tay = min_res / result_it_func;\n    // Оновлення матриці феромонів\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (t_matrix[i][j] != Infinity) {\n          if (visited_array[i][j] === 1)\n            tay_matrix[i][j] = parseFloat(\n              (1 - p) * tay_matrix[i][j] + delta_tay\n            ).toFixed(4);\n          else\n            tay_matrix[i][j] = parseFloat((1 - p) * tay_matrix[i][j]).toFixed(\n              4\n            );\n        }\n      }\n    }\n\n    if (k === 1) {\n      result = result_it;\n      result_func = result_it_func;\n    } else if (result_func > result_it_func) {\n      result = result_it;\n      result_func = result_it_func;\n    }\n  }\n\n  console.log('Розклад: ', result);\n  console.log('Значення ЦФ: ', result_func);\n  //////\n  const endTime = performance.now();\n  const executionTime = endTime - startTime;\n\n  return { result, result_func, executionTime };\n}\n","import { generateMatrix, getGreedyResults, calculateTotalPreparationTime } from '../algorithms/greedy.js';\nimport { getResultsPP } from '../algorithms/pairwisePermut.js';\nimport { ant } from '../algorithms/ant/ant.js';\n\n// Параметри\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // Розмірність задачі\nconst tau = 100; // Значення математичного сподівання\nconst deltaTau = 10; // Значення напівінтервалу\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Запуск тесту та побудова діаграм\n    const data = deviationTest(numOfStudents, tau, deltaTau);\n    drawDeviationChart(data, 'deviationTest'); // Відображення діаграм\n\n    // Середні відхилення для виведення в консоль\n    let { averageDeviationsFromAnt, averageDeviationsFromGreedy } = deviationTest(numOfStudents, tau, deltaTau);\n\n    console.log('Середні відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою мурашиного алгоритму – ', averageDeviationsFromAnt);\n    console.log('Середні відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою жадібного алгоритму – ', averageDeviationsFromGreedy);\n});\n\n// Тестова функція для розрахунку відхилень\nfunction deviationTest(numOfStudents, tau, deltaTau) {\n    let averageDeviationsFromAnt = [];\n    let averageDeviationsFromGreedy = [];\n\n    for (let n of numOfStudents) {\n        let deviationsFromAnt = [];\n        let deviationsFromGreedy = [];\n\n        for (let i = 0; i < 20; i++) {\n            // Згенерувати індивідуальну задачу P\n            let P = generateMatrix(n, tau, deltaTau);\n\n            // Розв’язати задачу P методом попарних перестановок, де початкова задача P визначена мурашиним алгоритмом\n            let { result: antSchedule, result_func: antTF } = ant(n, P, 1);\n\n            // Розв’язати задачу P методом попарних перестановок, де початкова задача P визначена жадібним алгоритмом\n            let { schedule: greedySchedule } = getGreedyResults(P);\n            let greedyTF = calculateTotalPreparationTime(P, greedySchedule);\n\n            // Вивід результатів жадібного алгоритму\n            console.log(`Розмірність задачі: ${n}, Запуск: ${i + 1}`);\n            console.log(`  Початковий розв’язок з жадібного алгоритму - Цільова функція (ЦФ): ${greedyTF}`);\n            console.log(`  Початковий розв’язок з мурашиного алгоритму - Цільова функція (ЦФ): ${antTF}`);\n\n            // Розв’язати задачу P методом попарних перестановок\n            let { bestTime: ppTimeFromAnt } = getResultsPP(P, antSchedule);\n            let { bestTime: ppTimeFromGreedy } = getResultsPP(P, greedySchedule);\n\n            // Вивід результатів методу попарних перестановок\n            console.log(`  Попарні перестановки з початковим розв’язком з мурашиного алгоритму - ЦФ: ${ppTimeFromAnt}`);\n            console.log(`  Попарні перестановки з початковим розв’язком з жадібного алгоритму - ЦФ: ${ppTimeFromGreedy}`);\n\n            // Розрахувати відхилення ЦФ\n            let deviationFromAnt = calculateDeviation(ppTimeFromAnt, antTF);\n            let deviationFromGreedy = calculateDeviation(ppTimeFromGreedy, greedyTF);\n\n            console.log(`  Відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою мурашиного алгоритму: ${deviationFromAnt}`);\n            console.log(`  Відхилення ЦФ для методу попарних перестановок відносно ЦФ отриманої за допомогою жадібного алгоритму: ${deviationFromGreedy}`);\n\n            deviationsFromAnt.push(deviationFromAnt);\n            deviationsFromGreedy.push(deviationFromGreedy);\n        }\n\n        // Визначити середнє відхилення ЦФ\n        averageDeviationsFromAnt.push(calculateAverage(deviationsFromAnt));\n        averageDeviationsFromGreedy.push(calculateAverage(deviationsFromGreedy));\n    }\n\n    return {\n        labels: numOfStudents, // Мітки для діаграми\n        averageDeviationsFromAnt,\n        averageDeviationsFromGreedy,\n    };\n}\n\n// Функція для розрахунку відхилення ЦФ\nfunction calculateDeviation(value1, value2) {\n    return Math.abs(value1 - value2) / Math.min(value1, value2);\n}\n\n// Побудова діаграм\nfunction drawDeviationChart(data, htmlElement) {\n    const ctx = document.getElementById(htmlElement).getContext('2d');\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: data.labels,\n            datasets: [\n                {\n                    label: 'Відхилення від ЦФ мурашиного алгоритму',\n                    data: data.averageDeviationsFromAnt,\n                    backgroundColor: 'rgb(96, 130, 182)',\n                    borderColor: 'rgba(70, 130, 180, 1)',\n                    borderWidth: 1,\n                },\n                {\n                    label: 'Відхилення від ЦФ жадібного алгоритму',\n                    data: data.averageDeviationsFromGreedy,\n                    backgroundColor: 'rgb(182, 96, 130)',\n                    borderColor: 'rgba(180, 70, 130, 1)',\n                    borderWidth: 1,\n                },\n            ],\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                title: {\n                    display: true,\n                    text: 'Середнє відхилення ЦФ для методу попарних перестановок відносно ЦФ мурашиного та жадібного алгоритмів',\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function (context) {\n                            return `Середнє відхилення: ${context.raw}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    beginAtZero: false,\n                    title: {\n                        display: true,\n                        text: 'Кількість студентів (n)',\n                    },\n                },\n                y: {\n                    beginAtZero: false,\n                    title: {\n                        display: true,\n                        text: 'Середнє відхилення',\n                    },\n                },\n            },\n            layout: {\n                backgroundColor: 'rgba(211, 211, 211, 1)',\n            },\n        },\n    });\n}\n\n// Розрахунок середнього значення масиву\nfunction calculateAverage(arr) {\n    if (arr.length === 0) {\n        return 0; // Повернути 0, якщо масив пустий\n    }\n\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n\n    return sum / arr.length;\n}\n"],"names":["generateMatrix","numOfStudents","tau","deltaTau","matrix","i","j","minVal","maxVal","findNearestNeighbor","current","visited","nearest","minDistance","greedySchedule","schedule","next","getGreedyResults","startTime","executionTimeGreedy","calculateTotalPreparationTime","total","swapPairs","newSchedule","group","candidates","index1","index2","temp","getResultsPP","initialSchedule","maxIterations","bestSchedule","bestTime","newTime","executionTimePairwise","ant","n","t_matrix","alpha","beta","tay_0","p","tay_matrix","lMax","result","result_func","t_use","row","minFromRows","subEveryRow","minBorder","mins","acc","curr","value","newMatrixRows","newMinBorderRows","minFromColumns","column","columnValues","subEveryColumn","newMatrixCols","newMinBorderCols","min_res","k","student","iteration_matrix","result_it","result_it_func","visited_array","x","formula_denominator","res_set","it","lastValue","randomNumber","key","currentStudent","nextStudent","delta_tay","executionTime","data","deviationTest","drawDeviationChart","averageDeviationsFromAnt","averageDeviationsFromGreedy","deviationsFromAnt","deviationsFromGreedy","P","antSchedule","antTF","greedyTF","ppTimeFromAnt","ppTimeFromGreedy","deviationFromAnt","calculateDeviation","deviationFromGreedy","calculateAverage","value1","value2","htmlElement","ctx","context","arr","sum"],"mappings":"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"}