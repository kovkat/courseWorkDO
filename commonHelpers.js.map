{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/branchesAndBounds.js","../src/js/algorithms/branchBound/calcShowResults.js","../src/js/algorithms/branchBound/bnbResults.js","../src/js/tests/branchBoundTest.js"],"sourcesContent":["// Об`єкт функцій для генерації вхідних даних\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents, tau, deltaTau, true);\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість занять для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @returns {number[]} - Массив з тривалостями занять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents);\n\n    // Генерація тривалостей занять у діапазоні від 45 до 120 хвилин\n    const times = Array.from(\n      { length: numOfStudents },\n      () => Math.floor(Math.random() * (120 - 45 + 1)) + 45\n    );\n\n    return times;\n  },\n};\n\n/**\n * Перевірка вхідних даних.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} [tau] - Значення математичного сподівання.\n * @param {number} [deltaTau] - Значення напівінтервалу ∆τ.\n * @param {boolean} [checkTauDeltaTau=false] - Флаг для перевірки tau та deltaTau.\n * @throws {Error} - Якщо неправильні вхідні дані.\n */\nfunction validateInputs(\n  numOfStudents,\n  tau,\n  deltaTau,\n  checkTauDeltaTau = false\n) {\n  if (\n    !Number.isInteger(numOfStudents) ||\n    numOfStudents <= 0 ||\n    numOfStudents % 2 !== 0 // Кількість студентів повинна бути парною\n  ) {\n    throw new Error(\n      'Неправильні вхідні дані! Очікується ціле додатнє парне число для numOfStudents.'\n    );\n  }\n\n  if (checkTauDeltaTau) {\n    if (tau < 0 || deltaTau < 0) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікуються не від’ємні значення для tau і deltaTau.'\n      );\n    }\n  }\n}\n\n// Приклад використання\n// try {\n//   const matrix = taskGenerator.generateMatrix(4, 50, 10);\n//   console.log('Матриця передування:', matrix);\n\n//   const lessonDurations = taskGenerator.generateLessonDuration(4);\n//   console.log('Тривалості занять:', lessonDurations);\n// } catch (error) {\n//   console.error(error.message);\n// }\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n","// Pohorila Dariia\n\n// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","// Pohorila Dariia\n\n// Заборона негамільтонових шляхів\nexport function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// Pohorila Dariia\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\n// import * as setRowColumnInfinityJs from './setRowColumnInfinity.js';\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nexport function branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n\n////// OUTPUT\n////// DATA\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(numOfStudents, tau, deltaTau);\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n\n// console.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n// console.table(matrix);\n\n// console.log('\\nВУЗЛИ');\n// const { minCostArray, lastCost } = branchAndBound(matrix);\n// console.log(minCostArray);\n\n// console.log('\\nРОЗКЛАД:');\n// let schedule = results.printSchedule(minCostArray);\n// console.log(schedule);\n\n// console.log('\\nСума переналаштувань:', lastCost, 'хв');\n\n// const totalDuration = results.sumOfDurations(trainingDuration);\n// console.log(`Тривалість уроків:`, totalDuration, 'хв');\n\n// const totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\n// console.log('ЧАС РОБОТИ ТРЕНЕРА:', totalWorkTime, 'хв\\n');\n","// Pohorila Dariia\n\n// Вивести розклад\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\n// Обчислити суму тривалостей занять\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\n// Обчислити сумарний робочий час тренера\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","import * as Generator from '../../generator/taskGenerator.js';\nimport * as bnb from './branchesAndBounds.js';\nimport * as calcShowResults from './calcShowResults.js';\n\n//////// РОЗВ`ЯЗОК ЗАДАЧІ МГтМ ТА ВИВЕДЕННЯ РЕЗУЛЬТАТІВ РОБОТИ АЛГОРИТМУ\n\n/**\n * Обчислює результати для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n * @returns {Object} - Об'єкт з результатами.\n */\nexport function getResults(matrix, trainingDuration) {\n  // Виконання алгоритму гілок та границь\n  let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n  // Обчислення розкладу та часу роботи тренера\n  let schedule = calcShowResults.printSchedule(minCostArray);\n  let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n  let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n    totalDuration,\n    lastCost\n  );\n\n  // Повернення об'єкта з усіма результатами\n  return {\n    trainingDuration,\n    matrix,\n    minCostArray,\n    lastCost,\n    schedule,\n    totalDuration,\n    totalWorkTime,\n  };\n}\n\n/**\n * Виводить результати на консоль для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n */\nexport function outputResultsBnB(matrix, trainingDuration) {\n  // Отримання результатів\n  const results = getResults(matrix, trainingDuration);\n\n  // Виведення результатів на консоль\n  console.log('ГЕНЕРАЦІЯ ІНДИВІДУАЛЬНОЇ ЗАДАЧІ...\\n');\n  console.log('1.ТРИВАЛІСТЬ ЗАЙНЯТЬ');\n  console.table(results.trainingDuration);\n\n  console.log('2.МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n  console.table(results.matrix);\n\n  console.log('\\nПОШУК РОЗВ`ЯЗКУ МГтМ...');\n  console.log('\\nВузли');\n  console.log(results.minCostArray);\n\n  console.log('\\nРозклад:');\n  console.log(results.schedule);\n\n  console.log('\\nСума переналаштувань:', results.lastCost, 'хв');\n  console.log('Тривалість уроків:', results.totalDuration, 'хв');\n  console.log('Час роботи тренера:', results.totalWorkTime, 'хв\\n');\n\n  return results.totalWorkTime;\n}\n\n// Test Case\n// try {\n//   const numOfStudents = 8;\n//   const tau = 50;\n//   const deltaTau = 10;\n\n//   // outputResultsBnB(numOfStudents, tau, deltaTau);\n//   // let results = getResults(numOfStudents, tau, deltaTau);\n//   // console.log(results);\n// } catch (error) {\n//   console.error('Помилка:', error.message);\n// }\n","import * as results from '../algorithms/branchBound/bnbResults.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst numOfStudents = 8;\nconst tau = 100;\nconst deltaTauMassive = [10, 50];\n\nfunction testBnb(numOfStudents, tau, deltaTauMassive) {\n  let targetFunctions = [];\n  const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n\n  for (let i = 0; i < deltaTauMassive.length; i += 1) {\n    const matrix = Generator.generateMatrix(\n      numOfStudents,\n      tau,\n      deltaTauMassive[i]\n    );\n\n    console.log(`\\nІТЕРАЦІЯ ${i + 1}`);\n    results.outputResultsBnB(matrix, trainingDuration);\n    let res = results.outputResultsBnB(matrix, trainingDuration);\n    targetFunctions.push(res);\n  }\n\n  return targetFunctions;\n}\n\ntestBnb(numOfStudents, tau, deltaTauMassive);\nlet res = testBnb(numOfStudents, tau, deltaTauMassive);\nconsole.log(res);\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","validateInputs","minVal","maxVal","matrix","j","checkTauDeltaTau","generateMatrix","generateLessonDuration","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","row","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","i","branchAndBound","matrixData","minCostArray","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","column","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","curr","lastCost","printSchedule","schedule","isLastNode","node","isEven","sumOfDurations","durations","acc","duration","calcTrainerWorkTime","totalDuration","getResults","trainingDuration","bnb.branchAndBound","calcShowResults.printSchedule","calcShowResults.sumOfDurations","totalWorkTime","calcShowResults.calcTrainerWorkTime","outputResultsBnB","results","deltaTauMassive","testBnb","targetFunctions","Generator.generateLessonDuration","Generator.generateMatrix","results.outputResultsBnB","res"],"mappings":"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"}