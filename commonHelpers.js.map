{"version":3,"file":"commonHelpers.js","sources":["../src/js/algorithms/branchAndBound.js"],"sourcesContent":["// Pohorila Dariia\nimport { generateMatrix } from '/js/generator/taskGenerator';\n\n// let matrix = generateMatrix(8, 15, 5);\n// console.table(matrix);\n\n/**\n * АЛГОРИТМ\n * 1. мінімальні по рядках\n * 2. мін по стовпцях\n * 3. зведення матриці\n *\n * 4. штрафи\n */\n\nlet precedenceMatrix = [\n  [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n  [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n  [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n  [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n  [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n  [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n  [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n  [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n];\n\nconsole.log(precedenceMatrix);\n\n// Знаходження мінімальних елементів по рядкам\nfunction minFromRows(matrix) {\n  return matrix.map(row => Math.min(...row));\n}\n\nlet minsByRows = minFromRows(precedenceMatrix);\nconsole.log('Мінімальні по рядкам:', minsByRows.join(' '));\n\n// Знаходження мінімальних елементів по стовпцях\nfunction minFromColumns(matrix) {\n  const mins = [];\n  const columns = Object.keys(matrix[0]);\n\n  columns.forEach(column => {\n    const columnValues = matrix.map(row => row[column]);\n    mins[column] = Math.min(...columnValues);\n  });\n\n  return mins;\n}\n\nlet minsByCols = minFromColumns(precedenceMatrix);\nconsole.log('Мінімальні по стовпцях:', minsByCols.join(' '));\n\n// Віднімання мінімумів по рядках\nfunction subEveryRow(matrix, minBorder) {\n  const mins = minFromRows(matrix);\n  minBorder += mins.reduce((acc, curr) => acc + curr, 0);\n\n  const newMatrix = matrix.map((row, i) =>\n    row.map((value, j) => value - mins[i])\n  );\n\n  return { matrix: newMatrix, minBorder };\n}\n\nlet { matrix: newMatrixRows, minBorder: newMinBorderRows } = subEveryRow(\n  precedenceMatrix,\n  0\n);\nconsole.log('Матриця після віднімання мінімумів по рядках:', newMatrixRows);\nconsole.log('Нова мінімальна границя:', newMinBorderRows);\n\n// Віднімання мінімумів по стовпцях\nfunction subEveryColumn(matrix, minBorder) {\n  const mins = minFromColumns(matrix);\n  minBorder += Object.values(mins).reduce((acc, curr) => acc + curr, 0);\n\n  const newMatrix = matrix.map((row, i) =>\n    row.map((value, j) => value - mins[j])\n  );\n\n  return { matrix: newMatrix, minBorder };\n}\n\nlet { matrix: newMatrixCols, minBorder: newMinBorderCols } = subEveryColumn(\n  precedenceMatrix,\n  0\n);\nconsole.log('Матриця після віднімання мінімумів по стовпцях:', newMatrixCols);\nconsole.log('Нова мінімальна границя:', newMinBorderCols);\n\n///// штрафи\n// function zeroDegreeMax(matrix) {\n//   const sumsArr = matrix.map((row, i) =>\n//     row.map((_, j) =>\n//       matrix[i][j] === 0 ? sumMinRowColumn(matrix, i, j) : undefined\n//     )\n//   );\n\n//   const max = sumsArr.map(row =>\n//     Math.max(...row.filter(val => val !== undefined))\n//   );\n//   return [Math.max(...max), sumsArr];\n// }\n\n// function zeroDegreePosition(matrix) {\n//   const [max, sumsArr] = zeroDegreeMax(matrix);\n//   const coords = [];\n//   sumsArr.forEach((row, i) =>\n//     row.forEach((value, j) => {\n//       if (value === max) {\n//         coords.push({ row: i, column: j });\n//       }\n//     })\n//   );\n//   return coords;\n// }\n\n// let zeroDegreePositions = zeroDegreePosition(precedenceMatrix);\n// console.log(\n//   `Максимальна степень 0 находятся на позициях ${zeroDegreePositions\n//     .map(coord => `(${coord.row},${coord.column})`)\n//     .join(' ')}`\n// );\n"],"names":["precedenceMatrix","minFromRows","matrix","row","minsByRows","minFromColumns","mins","column","columnValues","minsByCols","subEveryRow","minBorder","acc","curr","value","j","newMatrixRows","newMinBorderRows","subEveryColumn","newMatrixCols","newMinBorderCols"],"mappings":"ssBAeA,IAAIA,EAAmB,CACrB,CAAC,IAAU,GAAI,IAAU,GAAI,IAAU,EAAG,IAAU,EAAE,EACtD,CAAC,EAAG,IAAU,GAAI,IAAU,EAAG,IAAU,GAAI,GAAQ,EACrD,CAAC,IAAU,GAAI,IAAU,GAAI,IAAU,EAAG,IAAU,CAAC,EACrD,CAAC,GAAI,IAAU,GAAI,IAAU,EAAG,IAAU,GAAI,GAAQ,EACtD,CAAC,IAAU,GAAI,IAAU,GAAI,IAAU,EAAG,IAAU,CAAC,EACrD,CAAC,GAAI,IAAU,GAAI,IAAU,GAAI,IAAU,GAAI,GAAQ,EACvD,CAAC,IAAU,GAAI,IAAU,GAAI,IAAU,GAAI,IAAU,CAAC,EACtD,CAAC,EAAG,IAAU,GAAI,IAAU,EAAG,IAAU,EAAG,GAAQ,CACtD,EAEA,QAAQ,IAAIA,CAAgB,EAG5B,SAASC,EAAYC,EAAQ,CAC3B,OAAOA,EAAO,IAAIC,GAAO,KAAK,IAAI,GAAGA,CAAG,CAAC,CAC3C,CAEA,IAAIC,EAAaH,EAAYD,CAAgB,EAC7C,QAAQ,IAAI,wBAAyBI,EAAW,KAAK,GAAG,CAAC,EAGzD,SAASC,EAAeH,EAAQ,CAC9B,MAAMI,EAAO,CAAA,EAGb,OAFgB,OAAO,KAAKJ,EAAO,CAAC,CAAC,EAE7B,QAAQK,GAAU,CACxB,MAAMC,EAAeN,EAAO,IAAIC,GAAOA,EAAII,CAAM,CAAC,EAClDD,EAAKC,CAAM,EAAI,KAAK,IAAI,GAAGC,CAAY,CAC3C,CAAG,EAEMF,CACT,CAEA,IAAIG,EAAaJ,EAAeL,CAAgB,EAChD,QAAQ,IAAI,0BAA2BS,EAAW,KAAK,GAAG,CAAC,EAG3D,SAASC,EAAYR,EAAQS,EAAW,CACtC,MAAML,EAAOL,EAAYC,CAAM,EAC/B,OAAAS,GAAaL,EAAK,OAAO,CAACM,EAAKC,IAASD,EAAMC,EAAM,CAAC,EAM9C,CAAE,OAJSX,EAAO,IAAI,CAACC,EAAK,IACjCA,EAAI,IAAI,CAACW,EAAOC,IAAMD,EAAQR,EAAK,CAAC,CAAC,CACzC,EAE8B,UAAAK,EAC9B,CAEA,GAAI,CAAE,OAAQK,EAAe,UAAWC,CAAkB,EAAGP,EAC3DV,EACA,CACF,EACA,QAAQ,IAAI,gDAAiDgB,CAAa,EAC1E,QAAQ,IAAI,2BAA4BC,CAAgB,EAGxD,SAASC,EAAehB,EAAQS,EAAW,CACzC,MAAML,EAAOD,EAAeH,CAAM,EAClC,OAAAS,GAAa,OAAO,OAAOL,CAAI,EAAE,OAAO,CAACM,EAAKC,IAASD,EAAMC,EAAM,CAAC,EAM7D,CAAE,OAJSX,EAAO,IAAI,CAACC,EAAK,IACjCA,EAAI,IAAI,CAACW,EAAOC,IAAMD,EAAQR,EAAKS,CAAC,CAAC,CACzC,EAE8B,UAAAJ,EAC9B,CAEA,GAAI,CAAE,OAAQQ,EAAe,UAAWC,CAAkB,EAAGF,EAC3DlB,EACA,CACF,EACA,QAAQ,IAAI,kDAAmDmB,CAAa,EAC5E,QAAQ,IAAI,2BAA4BC,CAAgB"}