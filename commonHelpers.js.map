{"version":3,"file":"commonHelpers.js","sources":["../src/js/generator/taskGenerator.js","../src/js/algorithms/branchBound/reduction.js","../src/js/algorithms/branchBound/preventCycle.js","../src/js/algorithms/branchBound/branchesAndBounds.js","../src/js/algorithms/branchBound/calcShowResults.js","../src/js/algorithms/branchBound/bnbResults.js","../src/js/tests/branchBoundTest.js","../src/js/algorithms/greedy.js","../src/js/algorithms/pairwisePermut.js","../src/js/tests/timeTest.js"],"sourcesContent":["// Об`єкт функцій для генерації вхідних даних\nconst taskGenerator = {\n  /**\n   * Генерує матрицю передування для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @param {number} tau - Значення математичного сподівання.\n   * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n   * @returns {number[][]} - Матриця передування.\n   */\n  generateMatrix: function (numOfStudents, tau, deltaTau) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents, tau, deltaTau, true);\n\n    // Верхня та нижня границі для генерації випадкових значень\n    const minVal = tau - deltaTau;\n    const maxVal = tau + deltaTau;\n\n    // Створення та заповнення матриці значеннями\n    const matrix = Array.from({ length: numOfStudents }, () =>\n      Array.from({ length: numOfStudents }, () => Infinity)\n    );\n\n    for (let i = 0; i < numOfStudents; i += 1) {\n      for (let j = 0; j < numOfStudents; j += 1) {\n        // Перевірка, чи парність індексів різна\n        if (i % 2 !== j % 2) {\n          matrix[i][j] =\n            Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  /**\n   * Генерує тривалість занять для заданої кількості студентів.\n   * @param {number} numOfStudents - Кількість студентів.\n   * @returns {number[]} - Массив з тривалостями занять.\n   */\n  generateLessonDuration: function (numOfStudents) {\n    // Перевірка вхідних даних\n    validateInputs(numOfStudents);\n\n    // Генерація тривалостей занять у діапазоні від 45 до 120 хвилин\n    const times = Array.from(\n      { length: numOfStudents },\n      () => Math.floor(Math.random() * (120 - 45 + 1)) + 45\n    );\n\n    return times;\n  },\n};\n\n/**\n * Перевірка вхідних даних.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} [tau] - Значення математичного сподівання.\n * @param {number} [deltaTau] - Значення напівінтервалу ∆τ.\n * @param {boolean} [checkTauDeltaTau=false] - Флаг для перевірки tau та deltaTau.\n * @throws {Error} - Якщо неправильні вхідні дані.\n */\nfunction validateInputs(\n  numOfStudents,\n  tau,\n  deltaTau,\n  checkTauDeltaTau = false\n) {\n  if (\n    !Number.isInteger(numOfStudents) ||\n    numOfStudents <= 0 ||\n    numOfStudents % 2 !== 0 // Кількість студентів повинна бути парною\n  ) {\n    throw new Error(\n      'Неправильні вхідні дані! Очікується ціле додатнє парне число для numOfStudents.'\n    );\n  }\n\n  if (checkTauDeltaTau) {\n    if (tau < 0 || deltaTau < 0) {\n      throw new Error(\n        'Неправильні вхідні дані! Очікуються не від’ємні значення для tau і deltaTau.'\n      );\n    }\n  }\n}\n\n// Приклад використання\n// try {\n//   const matrix = taskGenerator.generateMatrix(4, 50, 10);\n//   console.log('Матриця передування:', matrix);\n\n//   const lessonDurations = taskGenerator.generateLessonDuration(4);\n//   console.log('Тривалості занять:', lessonDurations);\n// } catch (error) {\n//   console.error(error.message);\n// }\n\n// Експорт функцій\nexport const generateMatrix = taskGenerator.generateMatrix;\nexport const generateLessonDuration = taskGenerator.generateLessonDuration;\n\n//===== Test case 2 ====//\n// export function generateMatrix(numOfStudents, tau, deltaTau) {\n//   let matrix = []; // матриця передування\n\n//   for (let i = 0; i < numOfStudents; i += 1) {\n//     matrix[i] = [];\n\n//     for (let j = 0; j < numOfStudents; j += 1) {\n//       // якщо обидва індекси парні або непарні\n//       if (i % 2 === j % 2) {\n//         matrix[i][j] = Infinity;\n//         continue; // наступна ітерація\n//       }\n\n//       let minVal = tau - deltaTau; // нижнє значення\n//       let maxVal = tau + deltaTau; // верхнє значення\n\n//       matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n//     }\n//   }\n\n//   return matrix;\n// }\n","// Pohorila Dariia\n\n// Функція для редукції матриці (мінімізація по рядках і стовпцях)\nexport function reduceMatrix(matrix, index) {\n  let sumMinRows = 0; // Сума мінімальних значень по рядках\n  let sumMinColumns = 0; // Сума мінімальних значень по стовпцях\n\n  //MINROW\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array); // Знаходження мінімального значення в рядку\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0; // Якщо значення не є числом або не є кінцевим, встановити 0\n    }\n    sumMinRows += min; // Додати мінімальне значення до суми\n    let minimizedRow = array.map(number => {\n      return (number -= min); // Відняти мінімальне значення з кожного елемента рядка\n    });\n    matrix[index] = minimizedRow; // Оновити рядок в матриці\n  });\n\n  //TRANSPOSED\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  //MINCOL\n  matrix.forEach((array, index) => {\n    let min = Math.min.apply(null, array);\n    if (isNaN(min) || !isFinite(min)) {\n      min = 0;\n    }\n    sumMinColumns += min;\n    let minimizedColumn = array.map(number => {\n      return (number -= min);\n    });\n    matrix[index] = minimizedColumn;\n  });\n\n  //DISTRAMPOSE\n  matrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n\n  let total = sumMinRows + sumMinColumns; // Загальна вартість мінімізації\n\n  let node = {\n    index: index,\n    matrix: matrix,\n    cost: total,\n  };\n\n  return node;\n}\n","// Pohorila Dariia\n\n// Заборона негамільтонових шляхів\nexport function setRowColumnInfinity(matrix, from, to) {\n  // Функція для встановлення нескінченності у вказаних рядках та стовпцях\n  const thisMatrix = matrix.map(row => row.slice());\n\n  for (let i = 0; i < matrix.length; i += 1) {\n    thisMatrix[from][i] = Infinity; // Встановлення нескінченності в рядку\n    thisMatrix[i][to] = Infinity; // Встановлення нескінченності в стовпці\n    thisMatrix[to][from] = Infinity; // Встановлення нескінченності у зворотному напрямку\n    thisMatrix[to][0] = Infinity; // Встановлення нескінченності в першому елементі стовпця\n  }\n\n  return thisMatrix;\n}\n","// Pohorila Dariia\nimport * as matrixReduction from './reduction.js';\nimport * as preventCycle from './preventCycle.js';\n// import * as setRowColumnInfinityJs from './setRowColumnInfinity.js';\n\n// МЕТОД ГРАНИЦЬ І МЕЖ\nexport function branchAndBound(matrixData) {\n  // Встановлення нескінченності на діагоналі матриці\n  for (let i = 0; i < matrixData.length; i += 1) {\n    for (let j = 0; j < matrixData.length; j += 1) {\n      if (i == j) {\n        matrixData[i][j] = Infinity;\n      }\n    }\n  }\n\n  const minCostArray = []; // Масив для збереження мінімальної вартості\n  const objRoot = matrixReduction.reduceMatrix(matrixData, 0); // Початкова редукція матриці\n  minCostArray.push({\n    Node: objRoot.index + 1,\n    cost: objRoot.cost,\n  });\n\n  let row = objRoot.index; // Початковий рядок\n  let prevMatrix = objRoot.matrix.map(row => row.slice());\n  let prevCost = objRoot.cost; // Початкова вартість\n\n  // Прохід по всіх рядках матриці\n  for (let index = 0; index < matrixData.length - 1; index++) {\n    let objArrayTemp = []; // Тимчасовий масив для збереження вузлів\n    for (let column = 1; column < matrixData.length; column++) {\n      const infRowColumn = preventCycle.setRowColumnInfinity(\n        prevMatrix,\n        row,\n        column\n      ); // Встановлення нескінченності у рядках та стовпцях\n      const objNode = matrixReduction.reduceMatrix(infRowColumn, column); // Редукція нової матриці\n\n      objNode.cost = objNode.cost + prevCost + prevMatrix[row][column]; // Оновлення вартості вузла\n      objArrayTemp.push(objNode); // Додавання вузла до тимчасового масиву\n      //   console.log(\"Node: %d - Cost: %d\", objNode.index, objNode.cost);\n    }\n\n    // Знаходження вузла з мінімальною вартістю\n    let objMinCost = objArrayTemp.reduce(function (prev, curr) {\n      return prev.cost < curr.cost ? prev : curr;\n    });\n    // console.log(' Node: %d - Cost: %d ', objMinCost.index + 1, objMinCost.cost);\n\n    minCostArray.push({\n      Node: objMinCost.index + 1,\n      cost: objMinCost.cost,\n    });\n\n    row = objMinCost.index;\n    prevMatrix = objMinCost.matrix.map(row => row.slice());\n    prevCost = objMinCost.cost;\n  }\n\n  // Витяг останнього значення cost з масиву minCostArray\n  const lastCost = minCostArray[minCostArray.length - 1].cost;\n\n  return { minCostArray, lastCost };\n}\n\n////// OUTPUT\n////// DATA\n// ТРИВАЛОСТІ УРОКІВ\n// const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n// const trainingDuration = [40, 120, 90, 90, 60, 50, 60, 40];\n\n// МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ\n// let matrix = Generator.generateMatrix(numOfStudents, tau, deltaTau);\n// let matrix = [\n//   [Infinity, 15, Infinity, 20, Infinity, 5, Infinity, 10],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 20, Infinity, 5, Infinity, 10, Infinity],\n//   [Infinity, 15, Infinity, 15, Infinity, 5, Infinity, 5],\n//   [10, Infinity, 15, Infinity, 10, Infinity, 10, Infinity],\n//   [Infinity, 20, Infinity, 20, Infinity, 10, Infinity, 5],\n//   [5, Infinity, 15, Infinity, 5, Infinity, 5, Infinity],\n// ];\n\n// console.log('\\nМАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n// console.table(matrix);\n\n// console.log('\\nВУЗЛИ');\n// const { minCostArray, lastCost } = branchAndBound(matrix);\n// console.log(minCostArray);\n\n// console.log('\\nРОЗКЛАД:');\n// let schedule = results.printSchedule(minCostArray);\n// console.log(schedule);\n\n// console.log('\\nСума переналаштувань:', lastCost, 'хв');\n\n// const totalDuration = results.sumOfDurations(trainingDuration);\n// console.log(`Тривалість уроків:`, totalDuration, 'хв');\n\n// const totalWorkTime = results.calcTrainerWorkTime(totalDuration, lastCost);\n// console.log('ЧАС РОБОТИ ТРЕНЕРА:', totalWorkTime, 'хв\\n');\n","// Pohorila Dariia\n\n// Вивести розклад\nexport function printSchedule(minCostArray) {\n  let schedule = ''; // Початкове значення розкладу\n\n  // Проходимо по елементах масиву minCostArray, починаючи з другого елемента\n  for (let i = 0; i < minCostArray.length; i++) {\n    const isLastNode = i === minCostArray.length - 1;\n    const node = minCostArray[i].Node;\n    const isEven = i % 2 === 0;\n\n    if (isLastNode) {\n      schedule += isEven ? `g${node}` : `b${node}`;\n    } else {\n      schedule += isEven ? `g${node} -> ` : `b${node} -> `;\n    }\n  }\n\n  return schedule; // Повертаємо розклад\n}\n\n// Обчислити суму тривалостей занять\nexport function sumOfDurations(durations) {\n  return durations.reduce((acc, duration) => acc + duration, 0);\n}\n\n// Обчислити сумарний робочий час тренера\nexport function calcTrainerWorkTime(totalDuration, lastCost) {\n  return totalDuration + lastCost;\n}\n","import * as Generator from '../../generator/taskGenerator.js';\nimport * as bnb from './branchesAndBounds.js';\nimport * as calcShowResults from './calcShowResults.js';\n\n//////// РОЗВ`ЯЗОК ЗАДАЧІ МГтМ ТА ВИВЕДЕННЯ РЕЗУЛЬТАТІВ РОБОТИ АЛГОРИТМУ\nexport function calcResultsBnB(matrix, trainingDuration) {\n  // Початок вимірювання часу\n  const startTime = performance.now();\n\n  // Виконання алгоритму гілок та границь\n  let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n  // Обчислення розкладу та часу роботи тренера\n  let schedule = calcShowResults.printSchedule(minCostArray);\n  let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n  let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n    totalDuration,\n    lastCost\n  );\n\n  // Завершення вимірювання часу та виведення результату\n  const endTime = performance.now();\n  const executionTimeBnB = endTime - startTime;\n\n  return {\n    totalWorkTimeBnB: totalWorkTime,\n    scheduleBnB: schedule,\n    executionTimeBnB,\n  };\n}\n\n/**\n * Обчислює результати для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n * @returns {Object} - Об'єкт з результатами.\n */\nexport function getResults(matrix, trainingDuration) {\n  // Виконання алгоритму гілок та границь\n  let { minCostArray, lastCost } = bnb.branchAndBound(matrix);\n\n  // Обчислення розкладу та часу роботи тренера\n  let schedule = calcShowResults.printSchedule(minCostArray);\n  let totalDuration = calcShowResults.sumOfDurations(trainingDuration);\n  let totalWorkTime = calcShowResults.calcTrainerWorkTime(\n    totalDuration,\n    lastCost\n  );\n\n  // Повернення об'єкта з усіма результатами\n  return {\n    trainingDuration,\n    matrix,\n    minCostArray,\n    lastCost,\n    schedule,\n    totalDuration,\n    totalWorkTime,\n  };\n}\n\n/**\n * Виводить результати на консоль для заданих параметрів.\n * @param {number} numOfStudents - Кількість студентів.\n * @param {number} tau - Значення математичного сподівання.\n * @param {number} deltaTau - Значення напівінтервалу ∆τ.\n */\nexport function outputResultsBnB(matrix, trainingDuration) {\n  // Отримання результатів\n  const results = getResults(matrix, trainingDuration);\n\n  // Виведення результатів на консоль\n  console.log('ГЕНЕРАЦІЯ ІНДИВІДУАЛЬНОЇ ЗАДАЧІ...\\n');\n  console.log('1.ТРИВАЛІСТЬ ЗАЙНЯТЬ');\n  console.table(results.trainingDuration);\n\n  console.log('2.МАТРИЦЯ ПЕРЕНАЛАШТУВАНЬ');\n  console.table(results.matrix);\n\n  console.log('\\nПОШУК РОЗВ`ЯЗКУ МГтМ...');\n  console.log('\\nВузли');\n  console.log(results.minCostArray);\n\n  console.log('\\nРозклад:');\n  console.log(results.schedule);\n\n  console.log('\\nСума переналаштувань:', results.lastCost, 'хв');\n  console.log('Тривалість уроків:', results.totalDuration, 'хв');\n  console.log('Час роботи тренера:', results.totalWorkTime, 'хв\\n');\n\n  return results.totalWorkTime;\n}\n\n// Test Case\n// try {\n//   const numOfStudents = 8;\n//   const tau = 50;\n//   const deltaTau = 10;\n\n//   // outputResultsBnB(numOfStudents, tau, deltaTau);\n//   // let results = getResults(numOfStudents, tau, deltaTau);\n//   // console.log(results);\n// } catch (error) {\n//   console.error('Помилка:', error.message);\n// }\n","import * as results from '../algorithms/branchBound/bnbResults.js';\nimport * as Generator from '../generator/taskGenerator.js';\n\n// Вхідні дані\nconst numOfStudents = 8;\nconst tau = 100;\nconst deltaTauMassive = [10, 50];\n\n// Обчислення ЦФ для різних ∆τ\nfunction testBnb(numOfStudents, tau, deltaTauMassive) {\n  let targetFunctions = [];\n  const trainingDuration = Generator.generateLessonDuration(numOfStudents);\n\n  for (let i = 0; i < deltaTauMassive.length; i += 1) {\n    const matrix = Generator.generateMatrix(\n      numOfStudents,\n      tau,\n      deltaTauMassive[i]\n    );\n\n    let res = results.calcResultsBnB(matrix, trainingDuration);\n    targetFunctions.push(res.totalWorkTimeBnB);\n  }\n\n  return targetFunctions;\n}\n\nlet targetFunctions = testBnb(numOfStudents, tau, deltaTauMassive);\nconsole.log(targetFunctions);\n\n// Вивести результати у вигляді графіка\nfunction drawChart(deltaTauMassive, targetFunctions, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // стовпчаста діаграма\n    data: {\n      labels: deltaTauMassive,\n      datasets: [\n        {\n          label: 'ЦФ vs ∆τ',\n          data: targetFunctions,\n          backgroundColor: 'rgb(96, 130, 182)', // Блакитний колір для стовпців\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Графік залежності ЦФ від ∆τ',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Цільова функція: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Значення напівінтервалу ∆τ',\n          },\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Цільова Функція',\n          },\n        },\n      },\n    },\n  });\n}\n\ndrawChart(deltaTauMassive, targetFunctions, 'bnbTest');\n","import * as Generator from '../generator/taskGenerator.js';\n\nexport function generateMatrix(numOfStudents, tau, deltaTau) {\n  let matrix = [];\n\n  for (let i = 0; i < numOfStudents; i += 1) {\n    matrix[i] = [];\n\n    for (let j = 0; j < numOfStudents; j += 1) {\n      if (i % 2 === j % 2) {\n        matrix[i][j] = Infinity;\n        continue;\n      }\n\n      let minVal = tau - deltaTau;\n      let maxVal = tau + deltaTau;\n\n      matrix[i][j] = Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n    }\n  }\n\n  return matrix;\n}\n\nfunction findNearestNeighbor(matrix, current, visited) {\n  let nearest = -1;\n  let minDistance = Infinity;\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (!visited.has(i) && matrix[current][i] < minDistance) {\n      minDistance = matrix[current][i];\n      nearest = i;\n    }\n  }\n\n  return nearest;\n}\n\nexport function greedySchedule(matrix) {\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  return schedule;\n}\n\n// Additional function for the timeTest\nexport function getGreedyResults(matrix) {\n  // Початок вимірювання часу\n  const startTime = performance.now();\n\n  let numOfStudents = matrix.length;\n  let visited = new Set();\n  let schedule = [];\n\n  let current = Math.floor(Math.random() * numOfStudents);\n  schedule.push(current);\n  visited.add(current);\n\n  while (schedule.length < numOfStudents) {\n    let next = findNearestNeighbor(matrix, current, visited);\n    if (next === -1) break;\n\n    schedule.push(next);\n    visited.add(next);\n    current = next;\n  }\n\n  // Завершення вимірювання часу та виведення результату\n  const endTime = performance.now();\n  const executionTimeGreedy = endTime - startTime;\n\n  return {\n    schedule,\n    executionTimeGreedy,\n  };\n}\n\n// const matrix = Generator.generateMatrix(8, 50, 10);\n// let { executionTimeGreedy } = getGreedyResults(matrix);\n// console.log(executionTimeGreedy);\n","import { generateMatrix, greedySchedule } from './greedy.js';\n\nfunction calculateTotalPreparationTime(matrix, schedule) {\n  let total = 0;\n  for (let i = 0; i < schedule.length - 1; i++) {\n    total += matrix[schedule[i]][schedule[i + 1]];\n  }\n  return total;\n}\n\nfunction swapPairs(schedule, numOfStudents) {\n  let newSchedule = schedule.slice();\n  let group = Math.random() < 0.5 ? 0 : 1;\n\n  let candidates = [];\n  for (let i = 0; i < numOfStudents; i++) {\n    if (i % 2 === group) {\n      candidates.push(i);\n    }\n  }\n\n  let index1 = candidates[Math.floor(Math.random() * candidates.length)];\n  let index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  while (index1 === index2) {\n    index2 = candidates[Math.floor(Math.random() * candidates.length)];\n  }\n\n  let temp = newSchedule[index1];\n  newSchedule[index1] = newSchedule[index2];\n  newSchedule[index2] = temp;\n\n  return newSchedule;\n}\n\nfunction optimizeSchedule(matrix, initialSchedule, maxIterations) {\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  return { bestSchedule, bestTime };\n}\n\n// Usage example\n// let numOfStudents = 8; // Must be even\n// let tau = 15;\n// let deltaTau = 5;\n// let maxIterations = 10000;\n\n// let matrix = generateMatrix(numOfStudents, tau, deltaTau);\n// console.table(matrix);\n\n// let initialSchedule = greedySchedule(matrix);\n// console.log('Initial Greedy Schedule:', initialSchedule);\n\n// let initialTime = calculateTotalPreparationTime(matrix, initialSchedule);\n// console.log('Total Preparation Time for Initial Greedy Schedule:', initialTime);\n\n// let { bestSchedule, bestTime } = optimizeSchedule(\n//   matrix,\n//   initialSchedule,\n//   maxIterations\n// );\n\n// console.log('Optimized Schedule:', bestSchedule);\n// console.log('Total Preparation Time:', bestTime);\n\n// Additional func for the timeTest\nexport function getResultsPP(\n  matrix,\n  initialSchedule = greedySchedule(matrix),\n  maxIterations = 1000\n) {\n  // if there is no data in parameters\n  // maxIterations = 1000\n  // initialSchedule = greedySchedule(matrix),\n\n  // Початок вимірювання часу\n  const startTime = performance.now();\n\n  let schedule = initialSchedule;\n  let bestSchedule = schedule;\n  let bestTime = calculateTotalPreparationTime(matrix, schedule);\n\n  let i = 0;\n  while (i < maxIterations) {\n    let newSchedule = swapPairs(schedule, schedule.length);\n    let newTime = calculateTotalPreparationTime(matrix, newSchedule);\n\n    if (newTime < bestTime) {\n      bestTime = newTime;\n      bestSchedule = newSchedule;\n    }\n\n    schedule = newSchedule;\n    i++;\n  }\n\n  // Завершення вимірювання часу та виведення результату\n  const endTime = performance.now();\n  const executionTimePairwise = endTime - startTime;\n\n  return { bestSchedule, bestTime, executionTimePairwise };\n}\n","import * as Generator from '../generator/taskGenerator.js';\nimport * as resultsGreedy from '../algorithms/greedy.js';\nimport * as resultsBnB from '../algorithms/branchBound/bnbResults.js';\nimport * as resultsPP from '../algorithms/pairwisePermut.js';\n\n// Вхідні дані\nconst numOfStudents = [4, 6, 8, 10, 12, 14, 16, 18, 20]; // розмірність задачі\nconst tau = 100; // значення математичного сподівання\nconst deltaTau = 10; // значення напівінтервалу\n\n// Приклад виклику функції\nconst data = timeTest(numOfStudents, tau, deltaTau);\ndrawTimeChart(data, 'timeTest'); // вивід гістограм\n\n// середні часи для відображення в консолі\nlet { averageTimesGreedy, averageTimesAnt, averageTimesBnB, averageTimesPP } =\n  timeTest(numOfStudents, tau, deltaTau);\n\nconsole.log('averageTimesGreedy – ', averageTimesGreedy);\nconsole.log('averageTimesAnt – ', averageTimesAnt);\nconsole.log('averageTimesBnB – ', averageTimesBnB);\nconsole.log('averageTimesPP – ', averageTimesPP);\n\n// console.log([\n//   0.0028103500000007386, 0.002972900000001033, 0.004435449999999008,\n//   0.003060350000001222, 0.004820950000004131, 0.0057521000000008374,\n//   0.006731249999998567, 0.00821250000000191, 0.009808300000005942,\n// ]);\n\n// Тестування\nfunction timeTest(numOfStudents, tau, deltaTau) {\n  // Часи виконання алгоритмів та середні часи виконання алгоритмів\n  let averageTimesGreedy = [];\n  let averageTimesAnt = [];\n  let averageTimesBnB = [];\n  let averageTimesPP = [];\n\n  for (let i = 0; i < numOfStudents.length; i += 1) {\n    // 20 прогонів\n    let execTimesGreedy = [];\n    let execTimesAnt = [];\n    let execTimesBnB = [];\n    let execTimesPP = [];\n\n    for (let j = 0; j < 20; j += 1) {\n      // Генеруємо тривалості уроків та матрицю переналаштувань\n      const trainingDuration = Generator.generateLessonDuration(\n        numOfStudents[i],\n        tau,\n        deltaTau\n      );\n      const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n      // Обчислюємо роботи алгоритмів\n      // жадібний\n      const resGreedy =\n        resultsGreedy.getGreedyResults(matrix).executionTimeGreedy;\n      // мурахи\n      //   const resAnt = resultsPP.getResultsPP(matrix).executionTimePairwise;\n      // МГтМ\n      const resBnB = resultsBnB.calcResultsBnB(\n        matrix,\n        trainingDuration\n      ).executionTimeBnB;\n\n      // перестановки\n      const resPP = resultsPP.getResultsPP(matrix).executionTimePairwise;\n\n      // Додаємо часи в масив відповідного алгоритму\n      execTimesGreedy.push(resGreedy);\n      execTimesBnB.push(resBnB);\n      execTimesPP.push(resPP);\n      execTimesAnt.push(resPP);\n    }\n\n    // Обчислюємо середні часи та додаємо до масиву відповідного алгоритму\n    averageTimesGreedy.push(calculateAverage(execTimesGreedy));\n    averageTimesBnB.push(calculateAverage(execTimesBnB));\n    averageTimesPP.push(calculateAverage(execTimesPP));\n    averageTimesAnt.push(calculateAverage(execTimesAnt));\n  }\n\n  return {\n    labels: numOfStudents, // мітки графіка по горизонталі\n    averageTimesGreedy,\n    averageTimesAnt,\n    averageTimesBnB,\n    averageTimesPP,\n  };\n}\n\n// Виводимо гістограми\nfunction drawTimeChart(data, htmlElement) {\n  const ctx = document.getElementById(htmlElement).getContext('2d');\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: data.labels,\n      datasets: [\n        {\n          label: 'Greedy',\n          data: data.averageTimesGreedy,\n          backgroundColor: 'rgb(96, 130, 182)',\n          borderColor: 'rgba(70, 130, 180, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Ant',\n          data: data.averageTimesAnt,\n          backgroundColor: 'rgb(182, 96, 130)',\n          borderColor: 'rgba(180, 70, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'BnB',\n          data: data.averageTimesBnB,\n          backgroundColor: 'rgb(96, 182, 130)',\n          borderColor: 'rgba(70, 180, 130, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Pairwise',\n          data: data.averageTimesPP,\n          backgroundColor: 'rgb(130, 96, 182)',\n          borderColor: 'rgba(130, 70, 180, 1)',\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Average Execution Time vs Number of Students',\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Average Execution Time: ${context.raw}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Number of Students (n)',\n          },\n        },\n        y: {\n          beginAtZero: false,\n          title: {\n            display: true,\n            text: 'Average Execution Time (ms)',\n          },\n        },\n      },\n      layout: {\n        backgroundColor: 'rgba(211, 211, 211, 1)',\n      },\n    },\n  });\n}\n\n// Обчислити середнє значення масиву\nfunction calculateAverage(arr) {\n  if (arr.length === 0) {\n    return 0; // Повертаємо 0, якщо масив пустий\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum / arr.length;\n}\n\n///////// OTHER\n// function drawTimeChart(averageTimesGreedy, labels, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: labels,\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: averageTimesGreedy,\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//         },\n//       },\n//     },\n//   });\n// }\n\n// function drawTimeChart(data, htmlElement) {\n//   const ctx = document.getElementById(htmlElement).getContext('2d');\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: data.averageTimesGreedy, // Горизонтальна вісь: час виконання\n//       datasets: [\n//         {\n//           label: 'Greedy',\n//           data: data.labels, // Вертикальна вісь: кількість студентів\n//           backgroundColor: 'rgb(96, 130, 182)',\n//           borderColor: 'rgba(70, 130, 180, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Ant',\n//           data: data.averageTimesAnt,\n//           backgroundColor: 'rgb(182, 96, 130)',\n//           borderColor: 'rgba(180, 70, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'BnB',\n//           data: data.averageTimesBnB,\n//           backgroundColor: 'rgb(96, 182, 130)',\n//           borderColor: 'rgba(70, 180, 130, 1)',\n//           borderWidth: 0,\n//         },\n//         {\n//           label: 'Pairwise',\n//           data: data.averageTimesPairwise,\n//           backgroundColor: 'rgb(130, 96, 182)',\n//           borderColor: 'rgba(130, 70, 180, 1)',\n//           borderWidth: 0,\n//         },\n//       ],\n//     },\n//     options: {\n//       responsive: true,\n//       plugins: {\n//         legend: {\n//           position: 'top',\n//         },\n//         title: {\n//           display: true,\n//           text: 'Average Execution Time vs Number of Students',\n//         },\n//         tooltip: {\n//           callbacks: {\n//             label: function (context) {\n//               return `Average Execution Time: ${context.raw}`;\n//             },\n//           },\n//         },\n//       },\n//       scales: {\n//         x: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Average Execution Time',\n//           },\n//         },\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Number of Students (n)',\n//           },\n//         },\n//       },\n//       layout: {\n//         backgroundColor: 'rgba(211, 211, 211, 1)',\n//       },\n//     },\n//   });\n// }\n\n/**\n * Результати:\n * для різних ен виводимо середній час роботи одного і того ж алгоритма\n */\n\n// function timeTest(numOfStudents, tau, deltaTau) {\n//   // Часи виконання алгоритмів\n//   let execTimeGreedy = [];\n//   let execTimeAnt = [];\n//   let execTimeBnB = [];\n//   let execTimePairwise = [];\n\n//   // Середні часи виконання алгоритмів\n//   let aveTimeGreedy = [];\n//   let aveTimeAnt = [];\n//   let aveTimeBnB = [];\n//   let aveTimePairwise = [];\n\n//   let execTimes = [];\n//   let aveTimes = [];\n\n//   for (let i = 0; i < numOfStudents.length; i += 1) {\n//     execTimeGreedy = [];\n//     execTimeAnt = [];\n//     execTimeBnB = [];\n//     execTimePairwise = [];\n\n//     // 20 прогонів\n//     for (let j = 0; j < 20; j += 1) {\n//       // Генеруємо тривалості уроків\n//       const trainingDuration = Generator.generateLessonDuration(\n//         numOfStudents[i],\n//         tau,\n//         deltaTau\n//       );\n\n//       // Генеруємо матрицю переналаштувань\n//       const matrix = Generator.generateMatrix(numOfStudents[i], tau, deltaTau);\n\n//       // Обчислюємо роботи алгоритмів\n//       let resBnB = resultsBnB.calcResultsBnB(matrix, trainingDuration);\n\n//       // Додаємо часи в масив відповідного алгоритму\n//       execTimeBnB.push(resBnB.executionTimeBnB);\n//     }\n\n//     const averageTimeBnB = average(execTimeBnB);\n//     // Округлення до двох знаків після коми\n//     aveTimeBnB.push(parseFloat(averageTimeBnB.toFixed(2)));\n//   }\n\n//   aveTimes.push(aveTimeGreedy, aveTimeAnt, aveTimeBnB, aveTimePairwise);\n//   execTimes.push(execTimeGreedy, execTimeAnt, execTimeBnB, execTimePairwise);\n\n//   return { execTimes, aveTimes };\n// }\n"],"names":["taskGenerator","numOfStudents","tau","deltaTau","validateInputs","minVal","maxVal","matrix","i","j","checkTauDeltaTau","generateMatrix","generateLessonDuration","reduceMatrix","index","sumMinRows","sumMinColumns","array","min","minimizedRow","number","_","colIndex","row","minimizedColumn","total","setRowColumnInfinity","from","to","thisMatrix","branchAndBound","matrixData","minCostArray","objRoot","matrixReduction.reduceMatrix","prevMatrix","prevCost","objArrayTemp","column","infRowColumn","preventCycle.setRowColumnInfinity","objNode","objMinCost","prev","curr","lastCost","printSchedule","schedule","isLastNode","node","isEven","sumOfDurations","durations","acc","duration","calcTrainerWorkTime","totalDuration","calcResultsBnB","trainingDuration","startTime","bnb.branchAndBound","calcShowResults.printSchedule","calcShowResults.sumOfDurations","totalWorkTime","calcShowResults.calcTrainerWorkTime","executionTimeBnB","deltaTauMassive","testBnb","targetFunctions","Generator.generateLessonDuration","Generator.generateMatrix","res","results.calcResultsBnB","drawChart","htmlElement","ctx","context","findNearestNeighbor","current","visited","nearest","minDistance","greedySchedule","next","getGreedyResults","executionTimeGreedy","calculateTotalPreparationTime","swapPairs","newSchedule","group","candidates","index1","index2","temp","getResultsPP","initialSchedule","maxIterations","bestSchedule","bestTime","newTime","executionTimePairwise","data","timeTest","drawTimeChart","averageTimesGreedy","averageTimesAnt","averageTimesBnB","averageTimesPP","execTimesGreedy","execTimesAnt","execTimesBnB","execTimesPP","resGreedy","resultsGreedy.getGreedyResults","resBnB","resultsBnB.calcResultsBnB","resPP","resultsPP.getResultsPP","calculateAverage","arr","sum"],"mappings":"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"}